1. 什么是正则表达式
	是一个对象，用于进行各种匹配字符串的操作，如：
	验证表单中的内容是否符合要求，或替换敏感词，或从字符串中提取特定部分

2. 正则表达式在JS中的使用
	2.1 创建正则表达式
		1. 利用 RegExp对象来创建 正则表达式
			var 变量名 = new RegExp(/表达式/);
		2. 利用字面量创建 正则表达式
			var 变量名 = /表达式/;
		3. 正则表达式里面不需要加引号，不管是数字型还是字符串型
	2.2 test方法
		用来检测字符串是否符合正则表达式要求的规范，返回布尔值
		正则变量.test(输入的内容)

3. 正则表达式中的特殊字符
	3.1 边界符
		^   表示匹配行首的文本（即以谁开始）
		$	表示匹配行尾的文本（即以谁结束）
		注意，如果是^abc$，表示只能是abc，abcabc也不行
	3.2 字符类：[]
		3.2.1 与非字符类的区别
			var rg = /abc/;  // 只要包含abc就可以 
			var rg = /[abc]/ // 只要包含abc其中一个就可以
		3.2.2 范围符：-
			例如：
			var reg = /[a-z]/; // 只要包含a到z就可以
		3.2.3 字符组合
			var reg1 = /^[a-zA-Z0-9_-]$/; // 只要包含a到z或A到Z或0到9或_或-就可以
		3.2.4 取反
			如果中括号里面有^ 表示取反的意思 千万和 我们边界符 ^ 别混淆
			var reg2 = /^[^a-z]$/; // 不能包含a到z
	3.3 量词符
		用来设定某个模式出现的次数
		*		>= 0 次
		+		>= 1 次
		?		0 || 1 次
		{n}		n次
		{n,}	>= n 次
		{n,m}	n <= 次数 <= m
		注意，中间不要有空格
	3.4 或
		|，注意只能是一条竖线
	3.5 括号总结
		1. 中括号：字符集合，匹配方括号中的任意字符
			var reg = /^[abc]$/; // a 也可以 b 也可以 c 可以
		2. 大括号：量词符，里面表示重复次数
			var reg = /^abc{3}$/; // 它只是让c重复三次   abccc
		3. 小括号：表示优先级
			 var reg = /^(abc){3}$/; // 它是让abcc重复三次
	3.6 预定义类
		预定义类指的是某些常见模式的简写方式
		\d		匹配0-9之间的任意的数字，相当于[0-9]
		\D		\d取反
		\w		匹配任意的字母、数字、和下划线，相当于[A-Za-z0-9_]
		\W		\w取反
		\s		匹配空格（包括换行符、制表符、空格符等），相当于[\t\r\n\v\f]
		\S		\s取反

4. 正则表达式中的替换
	4.1 replace方法
		可以实现字符串替换操作，同样也可以是正则表达式，返回值是一个新字符串
		字符串.replace(正则表达式或字符串, 替换成的字符串)
	4.2 正则表达式参数
		/表达式/[匹配模式]
		匹配模式有三种值
		g	全局匹配
		i	忽略大小写
		gi	全局匹配+忽略大小写
	4.3 应用场景
		屏蔽敏感词，例如：
		div.innerHTML = text.value.replace(/激情|gay/g, '**'); // 将所有的“激情”和“gay”都换成“**”
