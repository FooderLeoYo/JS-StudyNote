1. 构造函数
	1.1 创建对象的方法
		ES6之前没有类的概念，想创建对象需要以下三种方法
		1. 利用 new Object() 创建对象
		var obj1 = new Object();
		2. 利用 对象字面量创建对象
		var obj2 = {};
		3. 利用构造函数创建对象
		function Star(uname, age) {
			this.uname = uname;
			this.age = age;
			this.sing = function() {
				console.log('我会唱歌');
			}
		}
	1.2 实例成员和静态成员
		1.2.1 实例成员
			就是构造函数内部通过this添加的成员
			uname age sing 就是实例成员
			实例成员只能通过实例化的对象来访问
		1.2.2 静态成员 
			在构造函数本身上添加的成员  
			Star.sex = '男';
			sex 就是静态成员
			静态成员只能通过构造函数来访问，不能通过对象来访问
    1.3 构造函数原型对象prototype
		1.3.1 为什么需要原型
			构造函数的问题：对于不变的方法，会为不同对象分别开辟空间，浪费内存
			因此可以把那些不变的方法直接定义在prototype对象上，这样所有对象的实例就可以共享这些方法
		1.3.2 什么是原型
			原型是构造函数默认生成的一个内置对象，其作用是共享方法
			公共属性与公共方法的定义区别：一般情况下,我们的公共属性定义到构造函数里面, 公共的方法我们放到原型对象身上
		1.3.3 语法
			例子：
			Star.prototype.sing = function() {
				console.log('我会唱歌');
			}
	1.4 对象原型__proto__
		对象实例身上系统自己添加一个 __proto__ 指向我们构造函数的原型对象 prototype
        方法的查找规则: 首先先看ldh 对象身上是否有 sing 方法,如果有就执行这个对象上的sing
        如果么有sing 这个方法,因为有__proto__ 的存在,就去构造函数原型对象prototype身上去查找sing这个方法
	1.5 prototype和__proto__中的constructor属性
		如果我们修改了原来的原型对象,给原型对象赋值的是一个对象,则必须手动的利用constructor指回原来的构造函数
	1.6 原型链
								       -----------  
								      |           |
								      |   null    |
								      |           |
								       -----------
									  /\
									 /
									/ 通过Object原型对象Object.prototype.__proto__指向
								       /
		    -----------       通过Object.prototype指向         -----------                       
		   |	       |------------------------------------>|  Object   |
		   |  Object   |<------------------------------------|  原型对象  |
		   |  构造函数  |  通过Object.prototye.consructor指回  | prototype |
		    -----------			    	              -----------  
								     /\
								    /
								   / 通过Stra原型对象Star.prototye.__proto__指向
								  /
	    -----------      通过Start.prototype指向         -----------                       
	   |           |---------------------------------->|   Star    |
	   |  构造函数  |<----------------------------------|  原型对象  |
	   |   Star    |   通过Star.prototye.consructor指回 | prototype |
	    -----------				            -----------  
	               \				 /\
	        通过调用 \				     /
		 Star创建 \			      / 通过ldh.__proto__指向
                           \			      /
                            \	    -----------      /
                             \/	   |           |    /
                                   |    ldh    |
                                   |   对象实例 |
                                    -----------
		即JavaScript的成员查找机制为：
		当访问一个对象的属性（方法）时，按照：对象自身——>对象的原型对象——>Object的原型对象——>null
	1.7 原型对象中的this指向问题
		在构造函数中this指向的是对象实例
		原型对象函数里面的this指向的仍然是对象实例
	1.8 扩展内置对象
		可以通过原型对象，对原来的内置对象进行扩展自定义的方法
		注意，不能给原型对象覆盖操作Array.prototype = {xx:function() {}}，只能是Array.prototype.xx = function() {}

2. 继承
	ES6之前没有extends，因此只能通过构造函数+原型对象模拟实现继承，被称为组合继承
	2.1 call()
		fun.call(需要指向的对象, 参数1, 参数2, ...)
		调用函数fun，并且修改函数运行时的this指向
	2.2 借用父构造函数继承属性
		核心原理：通过call()把父类型的this指向子类型的this，实现子类型继承父类型的属性
        例子：
		// 1. 父构造函数
        function Father(uname, age) {
            // this 指向父构造函数的对象实例
            this.uname = uname;
            this.age = age;
        }
        // 2 .子构造函数 
        function Son(uname, age) {
            // this 指向子构造函数的对象实例
            Father.call(this, uname, age);
        }
        var son = new Son('刘德华', 18);
	2.3 借用原型对象继承方法
		核心原理：将子类型的原型指向一个新建的父类型对象实例，再将子类型原型的constructor指回子类型
		例子：
		Son.prototype = new Father();
		Son.prototype.constructor = Son;

3. ES6类的本质
	类的本质其实还是一个函数 我们也可以简单的认为 类就是 构造函数的另外一种写法

4. ES5中的新增方法
	4.1 forEach方法
		遍历数组
		数组.forEach((function(value, index, array) {})
		value：每个元素的值
		index：索引号
		array：数组本身
	4.2 filter方法
		筛选出符合条件的元素，放到一个新创建的数组中并返回，返回值是数组型
		数组.filter((function(value, index, array) {
			return 条件1;
			return 条件2;
			...
		})
		例子：
		var newArr = arr.filter(function(value, index) {
			return value >= 20;
            return index % 2 === 0;
        });
	4.3 some方法
		查找数组中是否有满足条件的元素，返回值是布尔型
		数组.some((function(value, index, array) {
			return 条件;
		 })
		如果找到了第一个满足条件的元素，则终止循环，不再继续查找
	4.4 forEach和some区别
		forEach即使加了return true也会遍历完整个数组，而在some里面遇到return true就终止遍历
		因此，如果只想知道数组中是否包含某元素, 用some方法更合适
	4.5 trim方法
		去除字符串两侧空格，返回一个新的字符串
		str.trim()
	4.6 Object.keys方法
		用于遍历对象并获取其所有属性，返回值是一个新建数组
		Object.keys(目标对象)
	4.7 Object.defineProperty方法
		可为对象添加新属性或修改原有属性
		Object.defineProperty(目标对象, 目标属性, {
			value: // 设置属性的值
			writable: // 目标属性是否可被重写,true或false，默认false
			enumerable: // 目标属性是否可以被遍历，true或flase，默认false
			configurable: // 目标属性是否可被删除或再次修改特性（不是属性值），默认false
		})
